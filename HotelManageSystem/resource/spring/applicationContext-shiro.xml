<!-- <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	扫描的包
	<context:component-scan
		base-package="com.mapper" />
	<context:component-scan
		base-package="com.service" />
	继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java
	<bean id="MyRealm" class="com.realm.MyRealm" />
	<bean id="credentialsMatcher"
		class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="md5"></property>
		<property name="hashIterations" value="2"></property>
		<property name="storedCredentialsHexEncoded" value="true"></property>
	</bean>

	<bean id="MyRealm" class="com.realm.MyRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher"></property>
	</bean>

	定义缓存管理器
	<bean id="cacheManager"
		class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />

	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		session的失效时长，单位毫秒
		<property name="globalSessionTimeout" value="600000" />
		删除失效的session
		<property name="deleteInvalidSessions" value="true" />
	</bean>

	Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session
	即<property name="sessionMode" value="native"/>,详细说明见官方文档
	这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替
	<bean id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">

		<property name="realm" ref="MyRealm"></property>

		多realm的授权策略设置，配置为必须满足全部realm才算成功，不在realms前配置的话authenticator中的realms集合为空
		securityManager注入realms的时候，会把realm也放一份到authenticator中，所以必须写在realms上面!!!
		<property name="authenticator">
			<bean
				class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
				<property name="authenticationStrategy">
					<bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy" />
				</property>
			</bean>
		</property>

		<property name="realms"> <list> <bean class="com.realm.MyRealm"> <property 
			name="credentialsMatcher"> <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher"> 
			指定加密算法 <property name="hashAlgorithmName" value="MD5" /> 指定对密码连续进行5轮md5加密 
			<property name="hashIterations" value="5" /> </bean> </property> </bean> 
			</list> </property>

		使用配置的缓存管理器
		<property name="cacheManager" ref="cacheManager"></property>
		会话管理
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行
	Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持
	<bean id="shiroFilter"
		class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		Shiro的核心安全接口,这个属性是必须的
		<property name="securityManager" ref="securityManager" />

		要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面
		<property name="loginUrl" value="/WEB-INF/jsp/login.jsp" />

		登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了)
		<property name="successUrl" value="/system/main"/>
		用户访问未对其授权的资源时,所显示的连接
		若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp
		<property name="unauthorizedUrl" value="/" />

		Shiro连接约束配置,即过滤链的定义
		此处可配合这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839
		下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的
		anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种
		authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter
		<property name="filterChainDefinitions">
			<value>
				/=anon

				/HotelManageSystem/jsp=anon /main**=authc /user/info**=authc /admin/listUser**=authc,perms[admin:manage]
			</value>
		</property>
	</bean>

	保证实现了Shiro内部lifecycle函数的bean执行
	<bean id="lifecycleBeanPostProcessor"
		class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证
	配置以下两个bean即可实现此功能
	Enable Shiro Annotations for Spring-configured beans. Only run after 
		the lifecycleBeanProcessor has run

	

	使用shiro框架提供的切面类，用于创建代理对象
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"></bean>

	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>  
  -->
  
  
  <beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:context="http://www.springframework.org/schema/context"
 xmlns:p="http://www.springframework.org/schema/p"
 xmlns:mvc="http://www.springframework.org/schema/mvc"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
     
     
     <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 指定Shiro验证用户登录的类为自定义的Realm（若有多个Realm，可使用[realms]属性代替） -->
        <property name="realm">
            <bean class="com.realm.MyRealm"/>
        </property>
        <!--
        Shiro默认会使用Servlet容器的Session，此时修改超时时间的话，可以修改web.xml或者这里自定义的MyRealm
        而若想使用Shiro原生Session则可以设置sessionMode属性为native，此时修改超时时间则只能修改MyRealm
        -->
        <!-- <property name="sessionMode" value="native"/> -->
    </bean>

    <!-- Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，并且Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口，这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接（可根据项目的URL进行替换），非必须的属性，默认会找Web工程根目录下的[/login.jsp] -->
        <property name="loginUrl" value="/login.jsp"/>
        <!-- 登录成功后要跳转的连接（本例中此属性用不到，因为登录成功后的处理逻辑已在LoginController中硬编码为main.jsp） -->
        <!-- <property name="successUrl" value="/system/main"/> -->
        <!-- 用户访问未授权的资源时，跳转页面-->
        <property name="unauthorizedUrl" value="/meishouquan.jsp"/>
        <!--拦截配置-->
        <property name="filterChainDefinitions">
            <value>
               /=anon
               /jsp/home=authc
               /jsp/room/*=authc
               /jsp/staff/*=authc
               /jsp/stock/*=authc
               /jsp/user/*=authc
               <!-- /**=authc -->
            </value>
        </property>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <!-- http://shiro.apache.org/static/1.2.1/apidocs/org/apache/shiro/spring/LifecycleBeanPostProcessor.html -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    
<!--开启Shiro的注解（比如@RequiresRoles、@RequiresPermissions）  配置以下两个bean即可实现此功能-->
    
   <!-- 注意：**下面配置只能在spring.xml中配置生效，必须保证在加载第一个xml时加载此配置 -->
    
<!--     <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean> -->
   

</beans>